__author__ = 'Степованый Владислав Геннадьевич'
"""EASY"""
# Задание-1:
# Напишите функцию, округляющую полученное произвольное десятичное число
# до кол-ва знаков (кол-во знаков передается вторым аргументом).
# Округление должно происходить по математическим правилам (0.6 --> 1, 0.4 --> 0).
# Для решения задачи не используйте встроенные функции и функции из модуля math.

def my_round(number, ndigits):
    number = number * (10**ndigits) + 0.41
    number = number // 1
    return number / (10**ndigits)


print(my_round(2.1234567, 5))
print(my_round(2.1999967, 5))
print(my_round(2.9999967, 5))


# Задание-2:
# Дан шестизначный номер билета. Определить, является ли билет счастливым.
# Решение реализовать в виде функции.
# Билет считается счастливым, если сумма его первых и последних цифр равны.
# !!!P.S.: функция не должна НИЧЕГО print'ить

def lucky_ticket(ticket_number):
    k = str(ticket_number)
    k_1 = int(k[0])+int(k[1])+int(k[2])
    k_2 = int(k[3])+int(k[4])+int(k[5])
    if k_1 == k_2:
        return True
    else:
        return False

print(lucky_ticket(123006))
print(lucky_ticket(123216)) # в условии сказано, что дам именно шестизначный номер, поэтому проверкой ИД пренебрег
print(lucky_ticket(436751))

"""NORMAL"""

# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

def fibonacci(n, m):
    LF = [0, 1, 1]
    for i in range(3, m):
        LF.append(LF[i-2] + LF[i-1])
    return (LF[n:])

print(fibonacci(10,50))


# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()


def sort_to_max(origin_list):
    n = 1
    while n < len(origin_list):
        for i in range(len(origin_list) - n):
            if origin_list[i] > origin_list[i + 1]:
                origin_list[i], origin_list[i + 1] = origin_list[i + 1], origin_list[i]
        n += 1
    return origin_list
sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0])


# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.

def filter_1(F=[], S=""):                                                        #Функция фильтр (список, что ищем)
    K = []                                                                       #пустой массив для хранения результата
    j = 0                                                                        #счетчик повторений
    for i in F:
        if i == "сложный":
            K.append(i)
            j+=1
    if j < 1:
        return "0 совпадений"

    return K


print(filter_1(["простой", "простой", "сложный", "средний", "сложный"], "сложный"))




# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

def paral(A1=[], A2=[], A3=[], A4=[]):
    X = []               #Создал массив всех иксов и игриков
    Y = []
    xx=0                 #счетчик повторений
    yy=0
    X.append(A1[0])      #Не знаю как запонить массив i-тыми элементами других массивов
    X.append(A2[0])
    X.append(A3[0])
    X.append(A4[0])
    Y.append(A1[1])
    Y.append(A2[1])
    Y.append(A3[1])
    Y.append(A4[1])
    for i1 in X:
        if X.count(i1) == 2:
            xx += 1
    for i2 in Y:
        if Y.count(i2) == 2:
            yy += 1
    if xx == 2 and yy == 2:
        return True
    else:
        return False


print(paral([1,2], [2,3], [3,4], [4,5]))
print(paral([1,1], [3,11], [4,11], [1,8]))
